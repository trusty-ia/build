From c549ee6bc8bdaef6bf39f05f1ddebbf9cc82d15c Mon Sep 17 00:00:00 2001
From: Jingdong Lu <jingdong.lu@intel.com>
Date: Tue, 23 Oct 2018 16:30:53 +0800
Subject: [PATCH] Build libkeymaster and libtrusty for Linux

1, Add new makefiles to compile these two libs.
2, Change keymaster HAL code and libtrusty code for compilation.

Signed-off-by: Jingdong Lu <jingdong.lu@intel.com>
---
 Makefile                                     | 14 +++++++
 trusty/keymaster/keymaster_ipc.h             |  2 -
 trusty/keymaster/lib.mk                      | 61 ++++++++++++++++++++++++++++
 trusty/keymaster/test.mk                     | 51 +++++++++++++++++++++++
 trusty/keymaster/trusty_keymaster_device.cpp | 57 ++++----------------------
 trusty/keymaster/trusty_keymaster_ipc.cpp    |  3 +-
 trusty/libtrusty/Makefile                    | 41 +++++++++++++++++++
 trusty/libtrusty/trusty.c                    |  5 ++-
 8 files changed, 181 insertions(+), 53 deletions(-)
 create mode 100644 Makefile
 create mode 100644 trusty/keymaster/lib.mk
 create mode 100644 trusty/keymaster/test.mk
 create mode 100644 trusty/libtrusty/Makefile

diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..6afc7ed
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,14 @@
+all:
+	$(MAKE) -C trusty/libtrusty
+	$(MAKE) -C trusty/keymaster -f lib.mk
+	$(MAKE) -C trusty/keymaster -f test.mk
+	$(MAKE) -C trusty/storage/lib
+	$(MAKE) -C trusty/storage/proxy
+
+clean:
+	$(MAKE) -C trusty/storage/proxy clean
+	$(MAKE) -C trusty/storage/lib clean
+	$(MAKE) -C trusty/keymaster -f test.mk clean
+	$(MAKE) -C trusty/keymaster -f lib.mk clean
+	$(MAKE) -C trusty/libtrusty clean
+	$(RM) *~
diff --git a/trusty/keymaster/keymaster_ipc.h b/trusty/keymaster/keymaster_ipc.h
index d63757b..cb8c829 100644
--- a/trusty/keymaster/keymaster_ipc.h
+++ b/trusty/keymaster/keymaster_ipc.h
@@ -48,7 +48,6 @@ enum keymaster_command : uint32_t {
     KM_CONFIGURE                    = (18 << KEYMASTER_REQ_SHIFT),
 };
 
-#ifdef __ANDROID__
 
 /**
  * keymaster_message - Serial header for communicating with KM server
@@ -60,4 +59,3 @@ struct keymaster_message {
     uint8_t payload[0];
 };
 
-#endif
diff --git a/trusty/keymaster/lib.mk b/trusty/keymaster/lib.mk
new file mode 100644
index 0000000..fccbcce
--- /dev/null
+++ b/trusty/keymaster/lib.mk
@@ -0,0 +1,61 @@
+export OUTDIR = $(BUILD_DIR)lib/
+
+$(shell mkdir -p $(OUTDIR))
+
+SHAREDLIB := libkeymaster.so
+STATICLIB := libkeymaster.a
+
+BASE=../../../..
+
+SUBS=system/core \
+	system/keymaster \
+	hardware/libhardware
+
+KM=$(BASE)/system/keymaster
+
+INCLUDES=$(foreach dir,$(SUBS),-I $(BASE)/$(dir)/include) \
+	-I ../libtrusty/include \
+	-I $(BASE)/system/keymaster \
+
+LDFLAGS += -L$(BUILD_DIR)lib/ -ltrusty
+
+COMPILER_SPECIFIC_ARGS=-std=c++0x -fPIC
+
+CPPFLAGS=$(INCLUDES) -g -O0 -MD
+CXXFLAGS=-Wall -Werror -Wno-unused -Winit-self -Wpointer-arith	-Wunused-parameter \
+	-Wmissing-declarations \
+	-Wno-deprecated-declarations -fno-exceptions -DKEYMASTER_NAME_TAGS \
+	$(COMPILER_SPECIFIC_ARGS)
+
+CPPSRCS=\
+	$(KM)/android_keymaster/logger.cpp \
+	$(KM)/android_keymaster/serializable.cpp \
+	$(KM)/android_keymaster/authorization_set.cpp \
+	$(KM)/android_keymaster/android_keymaster_utils.cpp \
+	$(KM)/android_keymaster/android_keymaster_messages.cpp \
+	trusty_keymaster_device.cpp \
+	trusty_keymaster_ipc.cpp
+
+OBJS=$(CPPSRCS:.cpp=.o) $(CCSRCS:.cc=.o) $(CSRCS:.c=.o)
+DEPS=$(CPPSRCS:.cpp=.d) $(CCSRCS:.cc=.d) $(CSRCS:.c=.d)
+GCDA=$(CPPSRCS:.cpp=.gcda) $(CCSRCS:.cc=.gcda) $(CSRCS:.c=.gcda)
+GCNO=$(CPPSRCS:.cpp=.gcno) $(CCSRCS:.cc=.gcno) $(CSRCS:.c=.gcno)
+
+.PHONY: all clean
+
+all: $(SHAREDLIB) $(STATICLIB)
+
+$(SHAREDLIB): $(OBJS)
+	@echo --- Linking Shared library $@
+	$(CXX) -shared -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+$(STATICLIB): $(OBJS)
+	@echo --- Linking Static library $@
+	$(AR) rcs -o $(OUTDIR)$@ $(OBJS)
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(OBJS) $(DEPS) $(GCDA) $(GCNO)
+	rm -f $(OUTDIR)$(SHAREDLIB)
+	rm -f $(OUTDIR)$(STATICLIB)
+
diff --git a/trusty/keymaster/test.mk b/trusty/keymaster/test.mk
new file mode 100644
index 0000000..e510b86
--- /dev/null
+++ b/trusty/keymaster/test.mk
@@ -0,0 +1,51 @@
+export OUTDIR = $(BUILD_DIR)bin/
+
+$(shell mkdir -p $(OUTDIR))
+
+BINARIES := keymaster_test
+
+BASE=../../../..
+
+SUBS=system/core \
+	system/keymaster \
+	hardware/libhardware \
+
+KM=$(BASE)/system/keymaster
+
+INCLUDES=$(foreach dir,$(SUBS),-I $(BASE)/$(dir)/include) \
+	-I ../libtrusty/include \
+	-I $(BASE)/system/keymaster \
+
+LDFLAGS += -L$(BUILD_DIR)lib/ -lkeymaster -lssl -lcrypto
+
+COMPILER_SPECIFIC_ARGS=-std=c++0x -fPIC
+
+CPPFLAGS=$(INCLUDES) -g -O0 -MD
+CXXFLAGS=-Wall -Werror -Wno-unused -Winit-self -Wpointer-arith	-Wunused-parameter \
+	-Wmissing-declarations \
+	-Wno-deprecated-declarations -fno-exceptions -DKEYMASTER_NAME_TAGS \
+	-DKEYMASTER_UNIT_TEST_BUILD \
+	$(COMPILER_SPECIFIC_ARGS)
+
+CPPSRCS=\
+	$(KM)/android_keymaster/keymaster_configuration.cpp \
+	trusty_keymaster_main.cpp
+
+OBJS=$(CPPSRCS:.cpp=.o) $(CCSRCS:.cc=.o) $(CSRCS:.c=.o)
+DEPS=$(CPPSRCS:.cpp=.d) $(CCSRCS:.cc=.d) $(CSRCS:.c=.d)
+GCDA=$(CPPSRCS:.cpp=.gcda) $(CCSRCS:.cc=.gcda) $(CSRCS:.c=.gcda)
+GCNO=$(CPPSRCS:.cpp=.gcno) $(CCSRCS:.cc=.gcno) $(CSRCS:.c=.gcno)
+
+.PHONY: all clean
+
+all: $(BINARIES)
+
+$(BINARIES): $(OBJS)
+	@echo --- Linking test binary $@
+	$(CXX) -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(OBJS) $(DEPS) $(GCDA) $(GCNO)
+	rm -f $(OUTDIR)$(BINARIES)
+
diff --git a/trusty/keymaster/trusty_keymaster_device.cpp b/trusty/keymaster/trusty_keymaster_device.cpp
index b8c2032..9f59778 100644
--- a/trusty/keymaster/trusty_keymaster_device.cpp
+++ b/trusty/keymaster/trusty_keymaster_device.cpp
@@ -16,6 +16,13 @@
 
 #define LOG_TAG "TrustyKeymaster"
 
+#define ALOGD printf
+#define ALOGE printf
+#define ALOGI printf
+#define ALOGV printf
+
+#define PAGE_SIZE 4096
+
 #include <assert.h>
 #include <errno.h>
 #include <openssl/evp.h>
@@ -31,7 +38,6 @@
 
 #include <hardware/keymaster2.h>
 #include <keymaster/authorization_set.h>
-#include <log/log.h>
 
 #include "keymaster_ipc.h"
 #include "trusty_keymaster_device.h"
@@ -365,7 +371,7 @@ keymaster_error_t TrustyKeymasterDevice::export_key(keymaster_key_format_t expor
 keymaster_error_t TrustyKeymasterDevice::attest_key(const keymaster_key_blob_t* key_to_attest,
                                                     const keymaster_key_param_set_t* attest_params,
                                                     keymaster_cert_chain_t* cert_chain) {
-    ALOGD("Device received attest_key");
+    ALOGD("Device received attest_key, but not supported");
 
     if (error_ != KM_ERROR_OK) {
         return error_;
@@ -377,52 +383,7 @@ keymaster_error_t TrustyKeymasterDevice::attest_key(const keymaster_key_blob_t*
         return KM_ERROR_OUTPUT_PARAMETER_NULL;
     }
 
-    cert_chain->entry_count = 0;
-    cert_chain->entries = nullptr;
-
-    AttestKeyRequest request(message_version_);
-    request.SetKeyMaterial(*key_to_attest);
-    request.attest_params.Reinitialize(*attest_params);
-
-    keymaster_blob_t attestation_challenge = {};
-    request.attest_params.GetTagValue(TAG_ATTESTATION_CHALLENGE, &attestation_challenge);
-    if (attestation_challenge.data_length > kMaximumAttestationChallengeLength) {
-        ALOGE("%zu-byte attestation challenge; only %zu bytes allowed",
-              attestation_challenge.data_length, kMaximumAttestationChallengeLength);
-        return KM_ERROR_INVALID_INPUT_LENGTH;
-    }
-
-    AttestKeyResponse response(message_version_);
-    keymaster_error_t err = Send(KM_ATTEST_KEY, request, &response);
-    if (err != KM_ERROR_OK) {
-        return err;
-    }
-
-    // Allocate and clear storage for cert_chain.
-    keymaster_cert_chain_t& rsp_chain = response.certificate_chain;
-    cert_chain->entries = reinterpret_cast<keymaster_blob_t*>(
-        malloc(rsp_chain.entry_count * sizeof(*cert_chain->entries)));
-    if (!cert_chain->entries) {
-        return KM_ERROR_MEMORY_ALLOCATION_FAILED;
-    }
-    cert_chain->entry_count = rsp_chain.entry_count;
-    for (keymaster_blob_t& entry : array_range(cert_chain->entries, cert_chain->entry_count)) {
-        entry = {};
-    }
-
-    // Copy cert_chain contents
-    size_t i = 0;
-    for (keymaster_blob_t& entry : array_range(rsp_chain.entries, rsp_chain.entry_count)) {
-        cert_chain->entries[i].data = DuplicateBuffer(entry.data, entry.data_length);
-        if (!cert_chain->entries[i].data) {
-            keymaster_free_cert_chain(cert_chain);
-            return KM_ERROR_MEMORY_ALLOCATION_FAILED;
-        }
-        cert_chain->entries[i].data_length = entry.data_length;
-        ++i;
-    }
-
-    return KM_ERROR_OK;
+    return KM_ERROR_UNIMPLEMENTED;
 }
 
 keymaster_error_t TrustyKeymasterDevice::upgrade_key(const keymaster_key_blob_t* key_to_upgrade,
diff --git a/trusty/keymaster/trusty_keymaster_ipc.cpp b/trusty/keymaster/trusty_keymaster_ipc.cpp
index 686e7ae..9ed663e 100644
--- a/trusty/keymaster/trusty_keymaster_ipc.cpp
+++ b/trusty/keymaster/trusty_keymaster_ipc.cpp
@@ -16,6 +16,8 @@
 
 #define LOG_TAG "TrustyKeymaster"
 
+#define ALOGE printf
+
 // TODO: make this generic in libtrusty
 
 #include <errno.h>
@@ -26,7 +28,6 @@
 
 #include <algorithm>
 
-#include <log/log.h>
 #include <trusty/tipc.h>
 
 #include "keymaster_ipc.h"
diff --git a/trusty/libtrusty/Makefile b/trusty/libtrusty/Makefile
new file mode 100644
index 0000000..c3c66fd
--- /dev/null
+++ b/trusty/libtrusty/Makefile
@@ -0,0 +1,41 @@
+export OUTDIR = $(BUILD_DIR)lib/
+
+$(shell mkdir -p $(OUTDIR))
+
+LIB_DIR = $(BUILD_DIR)lib
+AR := ar
+
+SHAREDLIB := libtrusty.so
+STATICLIB := libtrusty.a
+
+INCLUDES = -I. \
+	-I$(PROJS)/include
+
+CFLAGS += $(INCLUDES) -g -n
+
+LDFLAGS += -lm -lrt -lpthread -fPIC -fpic
+
+SRC_FILES := *c
+
+OBJS := $(SRC_FILES:%.c=%.o)
+
+.PHONY: all clean
+
+all:  $(STATICLIB)  $(SHAREDLIB)
+
+%.o: %.c
+	@echo --- $(CC) $<
+	$(CC) $(CFLAGS) -c $< -o $(OUTDIR)$@
+
+$(STATICLIB): $(OBJS)
+	@echo --- Linking Static library $@
+	$(AR) rcs -o $(OUTDIR)$@ $(OBJS)
+
+$(SHAREDLIB): $(OBJS)
+	@echo --- Linking Shared library $@
+	$(CC) -shared -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(shell find -name "*.o" -and -not -name ".*")
+	rm -rf $(OUTDIR)
diff --git a/trusty/libtrusty/trusty.c b/trusty/libtrusty/trusty.c
index a6238af..f6e96c4 100644
--- a/trusty/libtrusty/trusty.c
+++ b/trusty/libtrusty/trusty.c
@@ -16,6 +16,9 @@
 
 #define LOG_TAG "libtrusty"
 
+#define ALOGE printf
+#define ALOGV printf
+
 #include <errno.h>
 #include <fcntl.h>
 #include <stdbool.h>
@@ -25,8 +28,6 @@
 #include <sys/ioctl.h>
 #include <unistd.h>
 
-#include <log/log.h>
-
 #include "tipc_ioctl.h"
 
 int tipc_connect(const char *dev_name, const char *srv_name)
-- 
2.7.4

