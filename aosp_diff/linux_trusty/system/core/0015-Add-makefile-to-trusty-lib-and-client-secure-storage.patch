From 906b3aa7534fd62529af9f1065cc73c4794ccac5 Mon Sep 17 00:00:00 2001
From: Gang G Chen <gang.g.chen@intel.com>
Date: Mon, 25 Mar 2019 06:39:10 +0000
Subject: [PATCH] Add makefile to trusty lib and client secure storage

1. Support makefile to trusty library and client secure storage
2. Support client app secure storage for clear linux

Signed-off-by: Gang G Chen <gang.g.chen@intel.com>
---
 Makefile                        |  13 ++++
 trusty/libtrusty/Makefile       |  41 +++++++++++
 trusty/libtrusty/trusty.c       |   5 +-
 trusty/storage/lib/Makefile     |  41 +++++++++++
 trusty/storage/lib/storage.c    |   5 +-
 trusty/storage/proxy/Makefile   |  36 +++++++++
 trusty/storage/proxy/log.h      |  12 ++-
 trusty/storage/proxy/proxy.c    |  30 ++++++--
 trusty/storage/proxy/rpmb-sim.c | 125 ++++++++++++++++++++++----------
 trusty/storage/proxy/rpmb-sim.h |   1 +
 10 files changed, 259 insertions(+), 50 deletions(-)
 create mode 100644 Makefile
 create mode 100644 trusty/libtrusty/Makefile
 create mode 100644 trusty/storage/lib/Makefile
 create mode 100644 trusty/storage/proxy/Makefile

diff --git a/Makefile b/Makefile
new file mode 100644
index 000000000..b142d038e
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,13 @@
+all:
+	$(MAKE) -C trusty/libtrusty
+	$(MAKE) -C trusty/storage/lib
+	$(MAKE) -C trusty/storage/proxy
+	$(MAKE) -C trusty/keymaster -f lib.mk
+	$(MAKE) -C trusty/keymaster/legacy -f test.mk
+clean:
+	$(MAKE) -C trusty/libtrusty clean
+	$(MAKE) -C trusty/storage/proxy clean
+	$(MAKE) -C trusty/storage/lib clean
+	$(MAKE) -C trusty/keymaster -f lib.mk clean
+	$(MAKE) -C trusty/keymaster/legacy -f test.mk clean
+	$(RM) *~
diff --git a/trusty/libtrusty/Makefile b/trusty/libtrusty/Makefile
new file mode 100644
index 000000000..7983f7aee
--- /dev/null
+++ b/trusty/libtrusty/Makefile
@@ -0,0 +1,41 @@
+export OUTDIR = $(BUILD_DIR)usr/lib64/
+
+$(shell mkdir -p $(OUTDIR))
+
+LIB_DIR = $(BUILD_DIR)usr/lib64
+AR := ar
+
+SHAREDLIB := libtrusty.so
+STATICLIB := libtrusty.a
+
+INCLUDES = -I. \
+	-I$(PROJS)/include
+
+CFLAGS += $(INCLUDES) -g -n
+
+LDFLAGS += -lm -lrt -lpthread -fPIC -fpic
+
+SRC_FILES := *c
+
+OBJS := $(SRC_FILES:%.c=%.o)
+
+.PHONY: all clean
+
+all:  $(STATICLIB)  $(SHAREDLIB)
+
+%.o: %.c
+	@echo --- $(CC) $<
+	$(CC) $(CFLAGS) -c $< -o $(OUTDIR)$@
+
+$(STATICLIB): $(OBJS)
+	@echo --- Linking Static library $@
+	$(AR) rcs -o $(OUTDIR)$@ $(OBJS)
+
+$(SHAREDLIB): $(OBJS)
+	@echo --- Linking Shared library $@
+	$(CC) -shared -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(shell find -name "*.o" -and -not -name ".*")
+	rm -rf $(OUTDIR)
diff --git a/trusty/libtrusty/trusty.c b/trusty/libtrusty/trusty.c
index a6238af7d..d4226fa0b 100644
--- a/trusty/libtrusty/trusty.c
+++ b/trusty/libtrusty/trusty.c
@@ -25,10 +25,11 @@
 #include <sys/ioctl.h>
 #include <unistd.h>
 
-#include <log/log.h>
-
 #include "tipc_ioctl.h"
 
+#define ALOGE printf
+#define ALOGV printf
+
 int tipc_connect(const char *dev_name, const char *srv_name)
 {
 	int fd;
diff --git a/trusty/storage/lib/Makefile b/trusty/storage/lib/Makefile
new file mode 100644
index 000000000..89d6d6edf
--- /dev/null
+++ b/trusty/storage/lib/Makefile
@@ -0,0 +1,41 @@
+export OUTDIR = $(BUILD_DIR)usr/lib64/
+
+SHAREDLIB := libinteltrustystorage.so
+STATICLIB := libinteltrustystorage.a
+
+AR := ar
+
+INCLUDES = -Iinclude \
+	-I../../libtrusty/include \
+	-I../interface/include
+
+CFLAGS += $(INCLUDES) -g -n
+
+LDFLAGS += -lm -lrt -lpthread -L$(OUTDIR) -ltrusty -fPIC -fpic
+
+SRC_FILES := *c
+
+OBJS := $(SRC_FILES:%.c=%.o)
+
+.PHONY: all clean
+
+all: $(SHAREDLIB) $(STATICLIB)
+
+%.o: %.c
+	@echo --- $(CC) $<
+	$(CC) $(CFLAGS) -c $< -o $(OUTDIR)$@
+
+$(SHAREDLIB): $(OBJS)
+	@echo --- Linking Shared library $@
+	$(CC) $(INCLUDES) -shared -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+$(STATICLIB): $(OBJS)
+	@echo --- Linking Static library $@
+	$(AR) rcs -o $(OUTDIR)$@ $(OBJS)
+
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(shell find -name "*.o" -and -not -name ".*")
+	rm -f $(OUTDIR)$(SHAREDLIB)
+	rm -f $(OUTDIR)$(STATICLIB)
diff --git a/trusty/storage/lib/storage.c b/trusty/storage/lib/storage.c
index 915bc17d4..ba886d7a8 100644
--- a/trusty/storage/lib/storage.c
+++ b/trusty/storage/lib/storage.c
@@ -22,11 +22,12 @@
 #include <stdint.h>
 #include <string.h>
 #include <sys/uio.h>
-
-#include <log/log.h>
+#include <stdio.h>
 #include <trusty/tipc.h>
 #include <trusty/lib/storage.h>
 
+#define ALOGE printf
+#define ALOGV printf
 #define MAX_CHUNK_SIZE 4040
 
 static inline file_handle_t make_file_handle(storage_session_t s, uint32_t fid)
diff --git a/trusty/storage/proxy/Makefile b/trusty/storage/proxy/Makefile
new file mode 100644
index 000000000..b7de21fcd
--- /dev/null
+++ b/trusty/storage/proxy/Makefile
@@ -0,0 +1,36 @@
+export OUTDIR = $(BUILD_DIR)usr/bin/
+
+$(shell mkdir -p $(OUTDIR))
+
+TARGET := storageproxyd
+
+INCLUDES = -Iinclude \
+	-I../../libtrusty/include \
+	-I../lib/include \
+	-I../interface/include
+
+CFLAGS += $(INCLUDES) -g -n
+
+
+LDFLAGS += -lm -lrt -lpthread -L$(BUILD_DIR)usr/lib64 -linteltrustystorage -ltrusty -lssl -lcrypto -fPIC -fpic
+
+SRC_FILES := *c
+
+OBJS := $(SRC_FILES:%.c=%.o)
+
+.PHONY: all clean
+
+all: $(TARGET)
+
+%.o: %.c
+	@echo --- $(CC) $<
+	$(CC) $(CFLAGS) -c $< -o $(OUTDIR)$@
+
+$(TARGET): $(OBJS)
+	@echo --- Linking target $@
+	$(CC) $(INCLUDES) -o $(OUTDIR)$@ $(OBJS) $(LDFLAGS)
+
+clean:
+	@echo --- Cleaning all build artifact
+	rm -f $(shell find -name "*.o" -and -not -name ".*")
+	rm -rf $(OUTDIR)
diff --git a/trusty/storage/proxy/log.h b/trusty/storage/proxy/log.h
index c81beab67..183782595 100644
--- a/trusty/storage/proxy/log.h
+++ b/trusty/storage/proxy/log.h
@@ -13,8 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#include <stdio.h>
 
 #define LOG_TAG "storageproxyd"
+#define ALOGE printf
+#define ALOGV printf
+#define ALOGI printf
+#define ALOGW printf
 
-#include <log/log.h>
+#define TEMP_FAILURE_RETRY(exp) ({         \
+    typeof (exp) _rc;                      \
+    do {                                   \
+        _rc = (exp);                       \
+    } while (_rc == -1 && errno == EINTR); \
+    _rc; })
 
diff --git a/trusty/storage/proxy/proxy.c b/trusty/storage/proxy/proxy.c
index d7682c222..422131efa 100644
--- a/trusty/storage/proxy/proxy.c
+++ b/trusty/storage/proxy/proxy.c
@@ -19,7 +19,6 @@
 #include <stdint.h>
 #include <string.h>
 #include <stdlib.h>
-#include <sys/capability.h>
 #include <sys/sysmacros.h>
 #include <sys/prctl.h>
 #include <sys/types.h>
@@ -28,8 +27,6 @@
 
 #include <linux/major.h>
 
-#include <cutils/android_filesystem_config.h>
-
 #include "ipc.h"
 #include "log.h"
 #include "rpmb.h"
@@ -39,7 +36,11 @@
 
 #define REQ_BUFFER_SIZE 4096
 /* /dev/block/mmcblk1p13 */
+#if 0
 #define RPMB_SIM_DEV_NAME       "/dev/block/by-name/teedata"
+#endif
+
+#define RPMB_SIM_DEV_NAME       "/dev/disk/by-partlabel/teedata"
 
 static uint8_t req_buffer[REQ_BUFFER_SIZE + 1];
 
@@ -204,10 +205,19 @@ int main(int argc, char *argv[])
     int rc;
 
     rc = rpmb_sim_open(RPMB_SIM_DEV_NAME);
-    if (rc < 0)
+    if (rc < 0) {
         rpmb_sim = 0;
-    else
-        rpmb_sim = is_use_sim_rpmb();
+        ALOGE("storage failed to open sim RPMB: %s.\n", RPMB_SIM_DEV_NAME);
+        return EXIT_FAILURE;
+    }
+    else {
+        uint8_t key[32] = {0};
+        rpmb_sim = 1;
+        if (!is_use_sim_rpmb()) {
+            ALOGI("storage to program key.\n");
+            program_key(key);
+        }
+    }
 
     if (rpmb_sim)
         ALOGI("storage use simulation rpmb.\n");
@@ -219,8 +229,10 @@ int main(int argc, char *argv[])
 
     /* initialize secure storage directory */
     rc = storage_init(ss_data_root);
-    if (rc < 0)
+    if (rc < 0) {
+        ALOGE("storage failed to storage_init.\n");
         return EXIT_FAILURE;
+    }
 
     if (!rpmb_sim) {
         rpmb_sim_close();
@@ -232,8 +244,10 @@ int main(int argc, char *argv[])
 
     /* connect to Trusty secure storage server */
     rc = ipc_connect(trusty_devname, ss_srv_name);
-    if (rc < 0)
+    if (rc < 0) {
+        ALOGE("storage failed to ipc_connect.\n");
         return EXIT_FAILURE;
+    }
 
     /* enter main loop */
     rc = proxy_loop();
diff --git a/trusty/storage/proxy/rpmb-sim.c b/trusty/storage/proxy/rpmb-sim.c
index eb2ce9f9c..b18e9487d 100644
--- a/trusty/storage/proxy/rpmb-sim.c
+++ b/trusty/storage/proxy/rpmb-sim.c
@@ -28,11 +28,15 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+#include <openssl/opensslv.h>
+#include <openssl/ossl_typ.h>
 #include <openssl/hmac.h>
-
 #include "ipc.h"
 #include "storage.h"
 #include "log.h"
+#include "linux/rpmb.h"
+
+#define DPRINTF printf
 
 struct rpmb_packet {
     uint8_t              pad[196];
@@ -99,7 +103,7 @@ static uint8_t read_buf[4096];
 #define TEEDATA_BLOCK_COUNT	(TEEDATA_SIZE/256)
 
 
-inline uint32_t swap32(uint32_t val)
+static inline uint32_t swap32(uint32_t val)
 {
 	return ((val & (uint32_t)0x000000ffUL) << 24)
 		| ((val & (uint32_t)0x0000ff00UL) <<  8)
@@ -107,7 +111,7 @@ inline uint32_t swap32(uint32_t val)
 		| ((val & (uint32_t)0xff000000UL) >> 24);
 }
 
-inline uint16_t swap16(uint16_t val)
+static inline uint16_t swap16(uint16_t val)
 {
 	return ((val & (uint16_t)0x00ffU) << 8)
 		| ((val & (uint16_t)0xff00U) >> 8);
@@ -307,7 +311,7 @@ static int get_key(uint8_t *key)
     return 0;
 }
 
-static int program_key(const uint8_t *key)
+int program_key(const uint8_t *key)
 {
     int rc = 0;
 
@@ -327,46 +331,93 @@ static int program_key(const uint8_t *key)
 
     return 0;
 }
-
-static int rpmb_mac(uint8_t *key, const struct rpmb_packet *packet,
-                    int packet_count, uint8_t *mac)
+/* Make rpmb_mac compatible for different openssl versions */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+int rpmb_mac(const uint8_t *key, const struct rpmb_packet *frames,
+			size_t frame_cnt, uint8_t *mac)
 {
-    int i;
-    int hmac_ret;
-    unsigned int md_len;
-    HMAC_CTX hmac_ctx;
-
-    HMAC_CTX_init(&hmac_ctx);
-    hmac_ret = HMAC_Init_ex(&hmac_ctx, key, 32, EVP_sha256(), NULL);
-    if (!hmac_ret) {
-        ALOGE("HMAC_Init_ex failed\n");
-        goto err;
-    }
-
-    for (i = 0; i < packet_count; i++) {
-        hmac_ret = HMAC_Update(&hmac_ctx, packet[i].data, 284);
-        if (!hmac_ret) {
-            ALOGE("HMAC_Update failed\n");
-            goto err;
-        }
-    }
+	int i;
+	int hmac_ret;
+	unsigned int md_len;
+	HMAC_CTX hmac_ctx;
+
+	HMAC_CTX_init(&hmac_ctx);
+	hmac_ret = HMAC_Init_ex(&hmac_ctx, key, 32, EVP_sha256(), NULL);
+	if (!hmac_ret) {
+		DPRINTF(("HMAC_Init_ex failed\n"));
+		goto err;
+	}
+
+	for (i = 0; i < frame_cnt; i++) {
+		hmac_ret = HMAC_Update(&hmac_ctx, frames[i].data, 284);
+		if (!hmac_ret) {
+			DPRINTF(("HMAC_Update failed\n"));
+			goto err;
+		}
+	}
+
+	hmac_ret = HMAC_Final(&hmac_ctx, mac, &md_len);
+	if (md_len != 32) {
+		DPRINTF(("bad md_len %d != 32.\n", md_len));
+		goto err;
+	}
+
+	if (!hmac_ret) {
+		DPRINTF(("HMAC_Final failed\n"));
+		goto err;
+	}
 
-    hmac_ret = HMAC_Final(&hmac_ctx, mac, &md_len);
-    if (md_len != 32) {
-        ALOGE("bad md_len %d != 32.\n", md_len);
-        exit(1);
-    }
+err:
+	HMAC_CTX_cleanup(&hmac_ctx);
 
-    if (!hmac_ret) {
-        ALOGE("HMAC_Final failed\n");
-        goto err;
-    }
+	return hmac_ret ? 0 : -1;
+}
+#else
+int rpmb_mac(const uint8_t *key, const struct rpmb_packet *frames,
+			size_t frame_cnt, uint8_t *mac)
+{
+	int i;
+	int hmac_ret;
+	unsigned int md_len;
+	HMAC_CTX *hmac_ctx;
+
+	hmac_ctx = HMAC_CTX_new();
+	if (hmac_ctx == NULL) {
+		DPRINTF(("get hmac_ctx failed\n"));
+		return -1;
+	}
+
+	hmac_ret = HMAC_Init_ex(hmac_ctx, key, 32, EVP_sha256(), NULL);
+	if (!hmac_ret) {
+		DPRINTF(("HMAC_Init_ex failed\n"));
+		goto err;
+	}
+
+	for (i = 0; i < frame_cnt; i++) {
+		hmac_ret = HMAC_Update(hmac_ctx, frames[i].data, 284);
+		if (!hmac_ret) {
+			DPRINTF(("HMAC_Update failed\n"));
+			goto err;
+		}
+	}
+
+	hmac_ret = HMAC_Final(hmac_ctx, mac, &md_len);
+	if (md_len != 32) {
+		DPRINTF(("bad md_len %u != 32.\n", md_len));
+		goto err;
+	}
+
+	if (!hmac_ret) {
+		DPRINTF(("HMAC_Final failed\n"));
+		goto err;
+	}
 
 err:
-    HMAC_CTX_cleanup(&hmac_ctx);
+	HMAC_CTX_free(hmac_ctx);
 
-    return hmac_ret ? 0 : -1;
+	return hmac_ret ? 0 : -1;
 }
+#endif
 
 static int rpmb_program_key(const struct rpmb_packet* in_frame, uint32_t in_cnt,
                             struct rpmb_packet* out_frame, uint32_t out_cnt)
diff --git a/trusty/storage/proxy/rpmb-sim.h b/trusty/storage/proxy/rpmb-sim.h
index 68ac4cd99..4405acd94 100644
--- a/trusty/storage/proxy/rpmb-sim.h
+++ b/trusty/storage/proxy/rpmb-sim.h
@@ -23,3 +23,4 @@ int rpmb_sim_open(const char *rpmb_devname);
 int rpmb_sim_send(struct storage_msg *msg, const void *r, size_t req_len);
 void rpmb_sim_close(void);
 int is_use_sim_rpmb(void);
+int program_key(const uint8_t *key);
-- 
2.20.1

